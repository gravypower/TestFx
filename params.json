{"name":"TestFx","tagline":"Next Level Testing.","body":"<img src=\"http://matkoch.github.io/TestFx/scriptkiddie.jpg\" height=\"150px\" alt=\"Scriptkiddie\" />\r\n\r\n# TestFx\r\n\r\n[![Build](https://img.shields.io/teamcity/codebetter/Testfx_Ci.svg?label=master)](http://teamcity.codebetter.com/project.html?projectId=Testfx)\r\n[![Coverage](https://img.shields.io/teamcity/coverage/Testfx_Ci.svg)](http://teamcity.codebetter.com/viewLog.html?buildTypeId=Testfx_Ci&buildId=lastSuccessful&tab=coverage_dotnet)\r\n[![NuGet](https://img.shields.io/nuget/v/TestFx.svg)](http://nuget.org/packages/TestFx)\r\n[![Downloads](https://img.shields.io/nuget/dt/TestFx.svg?label=downloads)](http://nuget.org/packages/TestFx)\r\n\r\nWriting **high-quality**, **readable**, and **reliable** tests is everything this framework wants you to do. TestFx already includes the core requirements for a pleasent testing experience, like a **console runner** and **ReSharper integration**. It provides easy-to-use facilities to create **new test languages** as well as **adapters to existing frameworks**. Currently, it is most known for [TestFx.Specifications](#testfxspecifications).\r\n\r\nIf you have questions or comments, please don't hesitate to visit us on\r\n[![Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/matkoch/TestFx).\r\n\r\n## TestFx.Specifications\r\n\r\nTestFx.Specifications is a fluent syntax extension to TestFx, that defines `SpecK` as a base class for all test classes. When testing a method, the method is only stated once, followed by various test cases for this method. A typical test suite for the `Math.Pow` method could look like this:\r\n\r\n![Math.Pow Sample](http://matkoch.github.io/TestFx/math_pow.png)\r\n\r\nReSharper recognizes test cases and also supports the `UnitTestRunContext` action (default on shortcut <kbd>CTRL</kbd>+<kbd>U</kbd>,<kbd>R</kbd>) to execute tests by cursor position. After the execution of tests, ReSharper displays the results in the UnitTestSession view accordingly:\r\n\r\n![UnitTestSession Window](http://matkoch.github.io/TestFx/unit_test_session.png)\r\n\r\nThe output window offers a comprehensive summary for a particular test. It displays a list of all operations executed, along with an indicator whether it was successful or not. Thrown exceptions are displayed by name.\r\n\r\nFor a more details on the test language, read on with [examples](#examples) or [features](#features).\r\n\r\n### Examples\r\n\r\nThe following examples demonstrate how real-world problems can be solved using TestFx.Specifications.\r\n\r\n1. [FizzBuzz](https://github.com/matkoch/TestFx/tree/master/src/Example/101_FizzBuzz)\r\n * Concept of Act-Arrange-Assert\r\n * Default and named cases\r\n1. [BankAccount](https://github.com/matkoch/TestFx/tree/master/src/Example/102_BankAccount)\r\n  * Organization of test classes\r\n  * Default and custom subject creation\r\n1. [Calculator](https://github.com/matkoch/TestFx/tree/master/src/Example/103_Calculator)\r\n  * Extension of test DSL\r\n1. [PaymentController](https://github.com/matkoch/TestFx/tree/master/src/Example/104_PaymentController)\r\n  * Faked dependencies ([FakeItEasy](https://github.com/FakeItEasy/FakeItEasy))\r\n  * Random data generation ([Farada](https://github.com/Inspyro/Farada))\r\n\r\n### Features\r\n\r\nThe following feature-list is very focused on every individual feature and thus illustrates them using integration tests.\r\n\r\n* [Fluent syntax:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Simple/PassingSpecK.cs) Tests are written with an extensible fluent interface\r\n* [Auto-catch exceptions:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Exceptions/UnexpectedExceptionTest.cs) Exceptions from Act part are automatically catched\r\n* [Exception assertions:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Exceptions/ExceptionAssertionTest.cs) Various pre-defined assertions for exceptions, their message and inner exception\r\n* [Default subject creation:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Subject/DefaultCreationTest.cs) Automatically via marked fields and reflection\r\n* [Custom subject creation:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Subject/CustomCreationTest.cs) Individual per test class\r\n* [AdHoc subject creation:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Subject/AdHocCreationTest.cs) Individual per test case\r\n* [Context scoping:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Using/NestingTest.cs) Scopes are automatically created/disposed after test execution\r\n* [Fake creation:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/FakeItEasy/FakeCreationTest.cs) Automatically create FakeItEasy fakes based on marker attributes\r\n* [Fake setup:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/FakeItEasy/FakeSetupTest.cs) Automatically return values for FakeItEasy fakes based on marker attributes\r\n* [Ordered fake assertions:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/FakeItEasy/OrderedAssertionsTest.cs) Contextless assertion of ordered calls on FakeItEasy fakes\r\n* [Test data creation:](https://github.com/matkoch/TestFx/blob/master/src/TestFx.Specifications.IntegrationTests/Farada/AutoCreationTest.cs) Automatically create test data using Farada\r\n\r\n## Acknowledgments\r\n\r\nThis project was not possible without the help of some special guys. Raise your hands for:\r\n\r\n- [@drauch](https://github.com/drauch), [@fschmied](https://github.com/fschmied), [@Inspyro](https://github.com/Inspyro), [@ulrichb](https://github.com/ulrichb) for having so many discussions about testing\r\n- [@citizenmatt](https://github.com/citizenmatt), [@nesteruk](https://github.com/nesteruk), [@kskrygan](https://github.com/kskrygan), [@controlflow](https://github.com/controlflow) for plugin support\r\n- [@xavierdecoster](https://github.com/xavierdecoster) for serving developers with [<img src=\"http://matkoch.github.io/TestFx/myget.png\" height=\"18px\" />](http://myget.org/)\r\n- [<img src=\"http://matkoch.github.io/TestFx/jetbrains.png\" height=\"18px\"/>](http://www.jetbrains.com) for serving developers with [<img src=\"http://matkoch.github.io/TestFx/codebetter.png\" height=\"18px\"/>](http://codebetter.com/)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}